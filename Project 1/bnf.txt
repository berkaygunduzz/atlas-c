  <program> ::= <stmts>
    <stmts> ::= <stmt> | <stmt> ; | <stmt> ; <stmts>
     <stmt> ::= const <id> = <expr>
              | var <id>
              | var <id> = <expr>
              | <id> = <expr>
              | if ( <cond> ) { <stmts> }
              | if ( <cond> ) { <stmts> } else { <stmts> }
              | while ( <cond> ) { <stmts> }
              | out ( <out_param> )
              | var <arr>
              | <arr> = <expr>
              | return <expr>
              | <func_def>
              | <func_call>
<out_param> ::= <expr> | <str> | <expr> , <out_param> | <str> , <out_param>
 <func_def> ::= <id> ( <param_def> ) => { <stmts> }
<param_def> ::= | <id> | <id> , <param_def>
     <expr> ::= <term> | <term> <op> <expr>
     <term> ::= <id> | <int> | <in> | <func_call> | <arr> | ( <expr> )
       <in> ::= in ( )
      <arr> ::= <id> [ <expr> ]
     <cond> ::= <expr> <comp_op> <expr> | <expr> <comp_op> <cond>
       <op> ::= + | - | * | / | mod  | ^
  <comp_op> ::= == | != | < | <= | > | >= | and | or
      <int> ::= <digit> | <digit> <int>
<func_call> ::= <id> ( <params> )
   <params> ::= | <expr> | <expr> , <params>
       <id> ::= <letter> | <letter> <id_chars>
 <id_chars> ::= <id_char> | <id_char> <id_chars>
  <id_char> ::= <letter> | <digit> | _
      <str> ::= "" | " <char_list> "
<char_list> ::= <letter> | <digit> | <special> | <letter> <char_list>
              | <digit> <char_list> | <special> <char_list>
    <digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
   <letter> ::= a | b | c | ... | z | A | B | C | ... | Z
  <special> ::= â€™ | + | - | * | / | ^ | ! | ? | % | & |   | ( | ) | [ | ] | { | } | = | . | , | ; | : | _ | \n
